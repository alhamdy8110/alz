name: Rollback Production Deployment
on:
  workflow_dispatch:
    inputs:
      rollback_commit:
        description: 'Commit hash to rollback to (leave empty for previous commit)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      confirm_rollback:
        description: 'Type "ROLLBACK" to confirm'
        required: true
        type: string

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  validate-rollback:
    name: 'Validate Rollback Request'
    runs-on: ubuntu-latest
    outputs:
      rollback_commit: ${{ steps.validate.outputs.rollback_commit }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Rollback Request
        id: validate
        run: |
          # Check confirmation
          if [ "${{ github.event.inputs.confirm_rollback }}" != "ROLLBACK" ]; then
            echo "❌ Rollback confirmation failed. Please type 'ROLLBACK' to confirm."
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Determine rollback commit
          if [ -n "${{ github.event.inputs.rollback_commit }}" ]; then
            ROLLBACK_COMMIT="${{ github.event.inputs.rollback_commit }}"
            echo "Using specified commit: $ROLLBACK_COMMIT"
          else
            ROLLBACK_COMMIT=$(git log --oneline -2 | tail -1 | cut -d' ' -f1)
            echo "Using previous commit: $ROLLBACK_COMMIT"
          fi
          
          # Validate commit exists
          if ! git cat-file -e "$ROLLBACK_COMMIT^{commit}" 2>/dev/null; then
            echo "❌ Invalid commit hash: $ROLLBACK_COMMIT"
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "rollback_commit=$ROLLBACK_COMMIT" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT
          
          # Show commit details
          echo "📋 Rollback Details:"
          echo "Target commit: $ROLLBACK_COMMIT"
          echo "Commit message: $(git log -1 --pretty=%B $ROLLBACK_COMMIT)"
          echo "Commit author: $(git log -1 --pretty=%an $ROLLBACK_COMMIT)"
          echo "Commit date: $(git log -1 --pretty=%ad $ROLLBACK_COMMIT)"

  rollback:
    name: 'Execute Rollback'
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.is_valid == 'true'
    environment: production-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "DevOps Rollback Bot"
          git config user.email "devops-bot@yourcompany.com"

      - name: Create Rollback Commit
        run: |
          ROLLBACK_COMMIT="${{ needs.validate-rollback.outputs.rollback_commit }}"
          
          echo "🔄 Creating rollback commit..."
          
          # Create revert commit
          git revert --no-edit HEAD
          
          # Add rollback information to commit message
          git commit --amend -m "🔄 ROLLBACK: ${{ github.event.inputs.reason }}

          Rollback Details:
          - Target commit: $ROLLBACK_COMMIT
          - Rollback reason: ${{ github.event.inputs.reason }}
          - Executed by: ${{ github.actor }}
          - Rollback date: $(date -u)
          - Original commit: $(git log -1 --pretty=%B $ROLLBACK_COMMIT)
          - Original author: $(git log -1 --pretty=%an $ROLLBACK_COMMIT)
          
          This rollback reverts the changes made in the previous deployment."

      - name: Push Rollback Commit
        run: |
          echo "📤 Pushing rollback commit to production..."
          git push origin main
          echo "✅ Rollback commit pushed successfully"

      - name: Create Rollback Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔄 Production Rollback - ${new Date().toISOString().split('T')[0]}`,
              body: `## Production Rollback Executed
              
              **Rollback Reason:** ${{ github.event.inputs.reason }}
              **Target Commit:** ${{ needs.validate-rollback.outputs.rollback_commit }}
              **Executed by:** ${{ github.actor }}
              **Date:** ${new Date().toISOString()}
              
              ### Rollback Details
              - **Original Commit:** $(git log -1 --pretty=%B ${{ needs.validate-rollback.outputs.rollback_commit }})
              - **Original Author:** $(git log -1 --pretty=%an ${{ needs.validate-rollback.outputs.rollback_commit }})
              - **Rollback Commit:** $(git log -1 --pretty=%H)
              
              ### Post-Rollback Actions
              - [ ] Verify infrastructure is stable
              - [ ] Check application functionality
              - [ ] Monitor system metrics
              - [ ] Notify stakeholders
              - [ ] Document lessons learned
              
              ### Investigation Required
              - [ ] Root cause analysis
              - [ ] Prevention measures
              - [ ] Process improvements
              
              ---
              *This issue was automatically created by the rollback workflow*`,
              labels: ['rollback', 'production', 'incident']
            });
            
            console.log(`Created rollback issue: ${issue.data.html_url}`);

      - name: Notify Rollback Completion
        run: |
          echo "🔄 Production rollback completed successfully"
          echo "📋 Rollback commit: $(git log -1 --pretty=%H)"
          echo "🔗 View changes: https://github.com/${{ github.repository }}/compare/main"
          
          # Add Slack notification here if needed
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🔄 Production rollback completed: ${{ github.event.inputs.reason }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

  post-rollback-verification:
    name: 'Post-Rollback Verification'
    runs-on: ubuntu-latest
    needs: rollback
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Rollback State
        run: |
          echo "🔍 Verifying rollback state..."
          
          # Initialize Terraform
          terraform init \
            -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" \
            -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}"
          
          # Check if there are any changes
          terraform plan -detailed-exitcode
          case $? in
            0) echo "✅ No changes detected - rollback successful" ;;
            1) echo "❌ Error in plan - investigation required" ;;
            2) echo "⚠️ Changes detected - rollback may not be complete" ;;
          esac

      - name: Log Rollback Activity
        run: |
          echo "📝 Logging rollback activity..."
          echo "Rollback Details:" >> rollback.log
          echo "Repository: ${{ github.repository }}" >> rollback.log
          echo "Rollback Commit: $(git log -1 --pretty=%H)" >> rollback.log
          echo "Target Commit: ${{ needs.validate-rollback.outputs.rollback_commit }}" >> rollback.log
          echo "Reason: ${{ github.event.inputs.reason }}" >> rollback.log
          echo "Executed by: ${{ github.actor }}" >> rollback.log
          echo "Date: $(date -u)" >> rollback.log
          echo "---" >> rollback.log
