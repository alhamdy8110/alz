name: Terraform Deploy Template
on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Working directory for Terraform'
        required: false
        default: '.'
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        default: '1.6.0'
        type: string
      environment:
        description: 'Environment name (dev/prod)'
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure service principal credentials'
        required: true
      PRODUCTION_APPROVERS:
        description: 'Production approvers list'
        required: false
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false

jobs:
  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Change to working directory
        run: |
          WORKING_DIR="${{ inputs.working_directory }}"
          if [ "$WORKING_DIR" != "." ]; then
            cd "$WORKING_DIR"
            echo "WORKING_DIR=$WORKING_DIR" >> $GITHUB_ENV
            echo "‚úÖ Changed to working directory: $WORKING_DIR"
          else
            echo "‚úÖ Using root directory"
          fi

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: State File Health Check
        run: |
          echo "üîç Checking state file health..."
          STATE_INFO=$(az storage blob show \
            --container-name ${{ vars.TF_STATE_CONTAINER }} \
            --name ${{ vars.TF_STATE_KEY }} \
            --account-name ${{ vars.TF_STATE_SA }} \
            --query '{size:properties.contentLength,lastModified:properties.lastModified}' -o json 2>/dev/null || echo '{"size":0,"lastModified":"N/A"}')
          
          echo "State file info: $STATE_INFO"
          
          # Alert if state file is too large (>100MB)
          STATE_SIZE=$(echo $STATE_INFO | jq -r '.size // 0')
          if [ $STATE_SIZE -gt 104857600 ]; then
            echo "‚ö†Ô∏è Warning: State file is larger than 100MB"
          fi

      - name: Backup State Before Apply
        run: |
          echo "üíæ Creating state backup before apply..."
          BACKUP_KEY="${{ vars.TF_STATE_KEY }}.backup.$(date +%Y%m%d-%H%M%S)"
          
          # Check if state file exists before backing up
          if az storage blob exists \
            --container-name ${{ vars.TF_STATE_CONTAINER }} \
            --name ${{ vars.TF_STATE_KEY }} \
            --account-name ${{ vars.TF_STATE_SA }} \
            --query exists -o tsv | grep -q true; then
            
            az storage blob copy start \
              --source-container ${{ vars.TF_STATE_CONTAINER }} \
              --source-blob ${{ vars.TF_STATE_KEY }} \
              --destination-container ${{ vars.TF_STATE_CONTAINER }} \
              --destination-blob "$BACKUP_KEY" \
              --account-name ${{ vars.TF_STATE_SA }}
            
            echo "‚úÖ State backup created: $BACKUP_KEY"
          else
            echo "‚ÑπÔ∏è No existing state file to backup (first deployment)"
          fi

      - name: Terraform Init with State Locking
        run: |
          echo "üîß Initializing Terraform with state backend..."
          terraform init \
            -backend-config="resource_group_name=${{ vars.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ vars.TF_STATE_SA }}" \
            -backend-config="container_name=${{ vars.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}" \
            -backend-config="use_azuread_auth=true" \
            -backend-config="use_oidc=true"

      - name: Terraform Plan with Detailed Exit Code
        id: plan
        run: |
          echo "üìã Running Terraform plan..."
          terraform plan -out=tfplan -detailed-exitcode
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "‚ùå Terraform plan failed"
          exit 1

      - name: Terraform Plan Changes
        if: steps.plan.outcome == 'success' && steps.plan.exitcode == 2
        run: |
          echo "üìù Terraform plan detected changes"
          echo "Changes will be applied in the next step"

      - name: Terraform Plan No Changes
        if: steps.plan.outcome == 'success' && steps.plan.exitcode == 0
        run: |
          echo "‚úÖ No changes detected - infrastructure is up to date"

      - name: Terraform Apply
        if: steps.plan.outcome == 'success' && steps.plan.exitcode == 2
        run: |
          echo "üöÄ Applying Terraform changes..."
          terraform apply -auto-approve tfplan

      - name: Post-deployment Tests
        run: |
          echo "üß™ Running post-deployment tests..."
          # Add your post-deployment test logic here
          echo "‚úÖ Post-deployment tests passed"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "‚úÖ Deployment successful for ${{ inputs.environment }} environment"
          # Add notification logic here if needed

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed for ${{ inputs.environment }} environment"
          # Add failure notification logic here if needed
