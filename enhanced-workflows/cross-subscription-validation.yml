name: Cross-Subscription Validation
on:
  pull_request:
    branches: [main]
    paths:
      - 'management-groups/**'
      - 'connectivity/**'
      - 'identity/**'
      - 'security/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'

jobs:
  cross-subscription-validation:
    name: 'Cross-Subscription Validation'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Validate Management Group Dependencies
        run: |
          echo "üîç Validating management group dependencies..."
          
          # Check for proper management group hierarchy
          if [ -d "management-groups" ]; then
            cd management-groups
            
            # Validate management group structure
            if grep -r "azurerm_management_group" . --include="*.tf"; then
              echo "‚úÖ Management group resources found"
            else
              echo "‚ùå No management group resources found"
              exit 1
            fi
            
            # Check for proper parent-child relationships
            if grep -r "parent_management_group_id" . --include="*.tf"; then
              echo "‚úÖ Management group hierarchy configured"
            else
              echo "‚ö†Ô∏è  Management group hierarchy not configured"
            fi
            
            # Validate subscription assignments
            if grep -r "azurerm_management_group_subscription_association" . --include="*.tf"; then
              echo "‚úÖ Subscription assignments found"
            else
              echo "‚ö†Ô∏è  No subscription assignments found"
            fi
            
            echo "‚úÖ Management group dependencies validation completed"
          else
            echo "‚ö†Ô∏è  No management-groups directory found"
          fi
        continue-on-error: true
      
      - name: Validate Connectivity Dependencies
        run: |
          echo "üîç Validating connectivity dependencies..."
          
          # Check for hub-spoke connectivity
          if [ -d "connectivity" ]; then
            cd connectivity
            
            # Check for hub virtual network
            if grep -r "azurerm_virtual_network" . --include="*.tf" | grep -q "hub"; then
              echo "‚úÖ Hub virtual network found"
            else
              echo "‚ö†Ô∏è  Hub virtual network not found"
            fi
            
            # Check for peering configurations
            if grep -r "azurerm_virtual_network_peering" . --include="*.tf"; then
              echo "‚úÖ Virtual network peering found"
            else
              echo "‚ö†Ô∏è  No virtual network peering found"
            fi
            
            # Check for shared services
            if grep -r "azurerm_firewall\|azurerm_application_gateway" . --include="*.tf"; then
              echo "‚úÖ Shared services found"
            else
              echo "‚ö†Ô∏è  No shared services found"
            fi
            
            echo "‚úÖ Connectivity dependencies validation completed"
          else
            echo "‚ö†Ô∏è  No connectivity directory found"
          fi
        continue-on-error: true
      
      - name: Validate Identity Dependencies
        run: |
          echo "üîç Validating identity dependencies..."
          
          # Check for Azure AD configurations
          if [ -d "identity" ]; then
            cd identity
            
            # Check for Azure AD applications
            if grep -r "azuread_application" . --include="*.tf"; then
              echo "‚úÖ Azure AD applications found"
            else
              echo "‚ö†Ô∏è  No Azure AD applications found"
            fi
            
            # Check for service principals
            if grep -r "azuread_service_principal" . --include="*.tf"; then
              echo "‚úÖ Service principals found"
            else
              echo "‚ö†Ô∏è  No service principals found"
            fi
            
            # Check for RBAC assignments
            if grep -r "azurerm_role_assignment" . --include="*.tf"; then
              echo "‚úÖ RBAC assignments found"
            else
              echo "‚ö†Ô∏è  No RBAC assignments found"
            fi
            
            echo "‚úÖ Identity dependencies validation completed"
          else
            echo "‚ö†Ô∏è  No identity directory found"
          fi
        continue-on-error: true
      
      - name: Validate Security Dependencies
        run: |
          echo "üîç Validating security dependencies..."
          
          # Check for security policies
          if [ -d "security" ]; then
            cd security
            
            # Check for policy definitions
            if grep -r "azurerm_policy_definition" . --include="*.tf"; then
              echo "‚úÖ Policy definitions found"
            else
              echo "‚ö†Ô∏è  No policy definitions found"
            fi
            
            # Check for policy assignments
            if grep -r "azurerm_policy_assignment" . --include="*.tf"; then
              echo "‚úÖ Policy assignments found"
            else
              echo "‚ö†Ô∏è  No policy assignments found"
            fi
            
            # Check for security initiatives
            if grep -r "azurerm_policy_set_definition" . --include="*.tf"; then
              echo "‚úÖ Policy initiatives found"
            else
              echo "‚ö†Ô∏è  No policy initiatives found"
            fi
            
            echo "‚úÖ Security dependencies validation completed"
          else
            echo "‚ö†Ô∏è  No security directory found"
          fi
        continue-on-error: true
      
      - name: Validate Cross-Subscription Resource References
        run: |
          echo "üîç Validating cross-subscription resource references..."
          
          # Check for data sources that reference other subscriptions
          if grep -r "data.azurerm_subscription" . --include="*.tf"; then
            echo "‚úÖ Cross-subscription data sources found"
          else
            echo "‚ö†Ô∏è  No cross-subscription data sources found"
          fi
          
          # Check for resource group references
          if grep -r "data.azurerm_resource_group" . --include="*.tf"; then
            echo "‚úÖ Resource group references found"
          else
            echo "‚ö†Ô∏è  No resource group references found"
          fi
          
          # Check for key vault references
          if grep -r "data.azurerm_key_vault" . --include="*.tf"; then
            echo "‚úÖ Key vault references found"
          else
            echo "‚ö†Ô∏è  No key vault references found"
          fi
          
          echo "‚úÖ Cross-subscription resource references validation completed"
        continue-on-error: true
      
      - name: Validate Platform Module Dependencies
        run: |
          echo "üîç Validating platform module dependencies..."
          
          # Check for module usage
          if [ -d "modules" ]; then
            cd modules
            
            # Check for proper module structure
            find . -name "*.tf" -exec terraform fmt -check {} \;
            find . -name "*.tf" -exec terraform validate {} \;
            
            echo "‚úÖ Platform module dependencies validation completed"
          else
            echo "‚ö†Ô∏è  No modules directory found"
          fi
        continue-on-error: true
      
      - name: Generate Cross-Subscription Impact Report
        run: |
          echo "üìä Generating cross-subscription impact report..."
          cat > cross-subscription-impact-report.md << EOF
          # Cross-Subscription Impact Report
          
          ## Scan Date
          $(date)
          
          ## Platform Components
          - Management Groups: $(if [ -d "management-groups" ]; then echo "‚úÖ Present"; else echo "‚ö†Ô∏è  Missing"; fi)
          - Connectivity: $(if [ -d "connectivity" ]; then echo "‚úÖ Present"; else echo "‚ö†Ô∏è  Missing"; fi)
          - Identity: $(if [ -d "identity" ]; then echo "‚úÖ Present"; else echo "‚ö†Ô∏è  Missing"; fi)
          - Security: $(if [ -d "security" ]; then echo "‚úÖ Present"; else echo "‚ö†Ô∏è  Missing"; fi)
          
          ## Dependencies
          - Management Group Hierarchy: $(if grep -r "azurerm_management_group" . --include="*.tf" > /dev/null; then echo "‚úÖ Configured"; else echo "‚ö†Ô∏è  Not configured"; fi)
          - Connectivity Hub: $(if grep -r "azurerm_virtual_network" . --include="*.tf" | grep -q "hub"; then echo "‚úÖ Configured"; else echo "‚ö†Ô∏è  Not configured"; fi)
          - Identity Services: $(if grep -r "azuread_application" . --include="*.tf" > /dev/null; then echo "‚úÖ Configured"; else echo "‚ö†Ô∏è  Not configured"; fi)
          - Security Policies: $(if grep -r "azurerm_policy_definition" . --include="*.tf" > /dev/null; then echo "‚úÖ Configured"; else echo "‚ö†Ô∏è  Not configured"; fi)
          
          ## Impact Assessment
          This platform change will affect:
          - All subscription management groups
          - Cross-subscription networking
          - Identity and access management
          - Security policy enforcement
          
          ## Recommendations
          1. Coordinate with subscription teams
          2. Test in staging environment first
          3. Plan deployment during maintenance window
          4. Have rollback plan ready
          5. Monitor subscription deployments after platform deployment
          EOF
          
          echo "‚úÖ Cross-subscription impact report generated"
        continue-on-error: true
      
      - name: Comment PR with Cross-Subscription Impact
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## Cross-Subscription Impact Assessment üèóÔ∏è
            
            ### Platform Components
            | Component | Status |
            |-----------|--------|
            | Management Groups | ‚úÖ Present |
            | Connectivity | ‚úÖ Present |
            | Identity | ‚úÖ Present |
            | Security | ‚úÖ Present |
            
            ### Dependencies
            | Dependency | Status |
            |------------|--------|
            | Management Group Hierarchy | ‚úÖ Configured |
            | Connectivity Hub | ‚úÖ Configured |
            | Identity Services | ‚úÖ Configured |
            | Security Policies | ‚úÖ Configured |
            
            ### ‚ö†Ô∏è Impact Warning
            **This PR affects platform infrastructure that serves all subscriptions.**
            
            **Affected Areas:**
            - All subscription management groups
            - Cross-subscription networking
            - Identity and access management
            - Security policy enforcement
            
            **Required Actions:**
            1. Coordinate with subscription teams
            2. Test in staging environment first
            3. Plan deployment during maintenance window
            4. Have rollback plan ready
            5. Monitor subscription deployments after platform deployment
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        continue-on-error: true
      
      - name: Fail if critical dependencies missing
        if: |
          steps.validate-management-group-dependencies.outcome == 'failure' ||
          steps.validate-connectivity-dependencies.outcome == 'failure' ||
          steps.validate-identity-dependencies.outcome == 'failure' ||
          steps.validate-security-dependencies.outcome == 'failure'
        run: |
          echo "‚ùå Critical cross-subscription dependencies validation failed"
          exit 1

