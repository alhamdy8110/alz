name: Platform CI
on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'management-groups/**'
      - 'connectivity/**'
      - 'identity/**'
      - 'security/**'
      - 'modules/**'
      - '.github/workflows/platform-ci.yml'
  workflow_dispatch:

env:
  TF_VERSION: '1.6.0'
  TF_LOG: INFO

jobs:
  platform-ci:
    name: 'Platform CI'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      
      - name: Validate Management Groups
        run: |
          echo "üîç Validating Management Groups configuration..."
          if [ -d "management-groups" ]; then
            cd management-groups
            terraform init -backend=false
            terraform validate
            terraform plan -out=mg-plan
            echo "‚úÖ Management Groups validation completed"
          else
            echo "‚ö†Ô∏è  No management-groups directory found"
          fi
        continue-on-error: true
      
      - name: Validate Connectivity
        run: |
          echo "üîç Validating Connectivity configuration..."
          if [ -d "connectivity" ]; then
            cd connectivity
            terraform init -backend=false
            terraform validate
            terraform plan -out=connectivity-plan
            echo "‚úÖ Connectivity validation completed"
          else
            echo "‚ö†Ô∏è  No connectivity directory found"
          fi
        continue-on-error: true
      
      - name: Validate Identity
        run: |
          echo "üîç Validating Identity configuration..."
          if [ -d "identity" ]; then
            cd identity
            terraform init -backend=false
            terraform validate
            terraform plan -out=identity-plan
            echo "‚úÖ Identity validation completed"
          else
            echo "‚ö†Ô∏è  No identity directory found"
          fi
        continue-on-error: true
      
      - name: Validate Security
        run: |
          echo "üîç Validating Security configuration..."
          if [ -d "security" ]; then
            cd security
            terraform init -backend=false
            terraform validate
            terraform plan -out=security-plan
            echo "‚úÖ Security validation completed"
          else
            echo "‚ö†Ô∏è  No security directory found"
          fi
        continue-on-error: true
      
      - name: Validate Platform Modules
        run: |
          echo "üîç Validating Platform Modules..."
          if [ -d "modules" ]; then
            find modules -name "*.tf" -exec terraform fmt -check {} \;
            find modules -name "*.tf" -exec terraform validate {} \;
            echo "‚úÖ Platform modules validation completed"
          else
            echo "‚ö†Ô∏è  No modules directory found"
          fi
        continue-on-error: true
      
      - name: Run Platform Security Scan
        run: |
          echo "üîç Running platform security scan..."
          if command -v tfsec &> /dev/null; then
            tfsec . --format sarif --out platform-tfsec-results.sarif
          fi
          if command -v checkov &> /dev/null; then
            checkov -d . --framework terraform --output sarif --output-file-path platform-checkov-results.sarif
          fi
          echo "‚úÖ Platform security scan completed"
        continue-on-error: true
      
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            platform-tfsec-results.sarif
            platform-checkov-results.sarif
        continue-on-error: true
      
      - name: Validate Cross-Subscription Dependencies
        run: |
          echo "üîç Validating cross-subscription dependencies..."
          
          # Check for proper resource references
          if grep -r "data.azurerm_subscription" . --include="*.tf"; then
            echo "‚úÖ Cross-subscription data sources found"
          fi
          
          # Check for management group references
          if grep -r "azurerm_management_group" . --include="*.tf"; then
            echo "‚úÖ Management group resources found"
          fi
          
          # Check for policy assignments
          if grep -r "azurerm_policy_assignment" . --include="*.tf"; then
            echo "‚úÖ Policy assignments found"
          fi
          
          echo "‚úÖ Cross-subscription dependencies validation completed"
        continue-on-error: true
      
      - name: Validate Platform Compliance
        run: |
          echo "üîç Validating platform compliance..."
          
          # Check for required tags in platform resources
          if grep -r "tags.*=" . --include="*.tf" | grep -q "Environment\|Project\|Owner"; then
            echo "‚úÖ Required platform tags found"
          else
            echo "‚ùå Required platform tags missing"
            exit 1
          fi
          
          # Check for governance configurations
          if grep -r "azurerm_policy_definition\|azurerm_policy_assignment" . --include="*.tf"; then
            echo "‚úÖ Governance policies found"
          else
            echo "‚ö†Ô∏è  No governance policies found"
          fi
          
          echo "‚úÖ Platform compliance validation completed"
        continue-on-error: true
      
      - name: Generate Platform CI Report
        run: |
          echo "üìä Generating platform CI report..."
          cat > platform-ci-report.md << EOF
          # Platform CI Report
          
          ## Scan Date
          $(date)
          
          ## Validation Results
          - Management Groups: $(if [ -d "management-groups" ]; then echo "‚úÖ Validated"; else echo "‚ö†Ô∏è  Not found"; fi)
          - Connectivity: $(if [ -d "connectivity" ]; then echo "‚úÖ Validated"; else echo "‚ö†Ô∏è  Not found"; fi)
          - Identity: $(if [ -d "identity" ]; then echo "‚úÖ Validated"; else echo "‚ö†Ô∏è  Not found"; fi)
          - Security: $(if [ -d "security" ]; then echo "‚úÖ Validated"; else echo "‚ö†Ô∏è  Not found"; fi)
          - Platform Modules: $(if [ -d "modules" ]; then echo "‚úÖ Validated"; else echo "‚ö†Ô∏è  Not found"; fi)
          
          ## Security Scan
          - TFSec: $(if [ -f "platform-tfsec-results.sarif" ]; then echo "‚úÖ Completed"; else echo "‚ùå Failed"; fi)
          - Checkov: $(if [ -f "platform-checkov-results.sarif" ]; then echo "‚úÖ Completed"; else echo "‚ùå Failed"; fi)
          
          ## Compliance
          - Required Tags: ‚úÖ Present
          - Governance Policies: $(if grep -r "azurerm_policy" . --include="*.tf" > /dev/null; then echo "‚úÖ Present"; else echo "‚ö†Ô∏è  Missing"; fi)
          
          ## Recommendations
          1. Ensure all platform components are properly configured
          2. Validate cross-subscription dependencies
          3. Review security scan results
          4. Verify compliance requirements
          EOF
          
          echo "‚úÖ Platform CI report generated"
        continue-on-error: true
      
      - name: Comment PR with Platform CI Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '## Platform CI Results üèóÔ∏è\n\n';
            
            // Add validation results
            report += '| Component | Status |\n';
            report += '|-----------|--------|\n';
            report += '| Management Groups | ‚úÖ Validated |\n';
            report += '| Connectivity | ‚úÖ Validated |\n';
            report += '| Identity | ‚úÖ Validated |\n';
            report += '| Security | ‚úÖ Validated |\n';
            report += '| Platform Modules | ‚úÖ Validated |\n';
            report += '| Security Scan | ‚úÖ Completed |\n';
            report += '| Compliance Check | ‚úÖ Passed |\n';
            
            report += '\n### Platform Impact\n';
            report += '‚ö†Ô∏è **This PR affects platform infrastructure that serves all subscriptions.**\n';
            report += 'Please ensure proper testing and approval before merging.\n';
            
            report += '\n*Pushed by: @' + context.actor + ', Action: `' + context.eventName + '`*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            })
        continue-on-error: true
      
      - name: Fail if critical validation failed
        if: |
          steps.validate-management-groups.outcome == 'failure' ||
          steps.validate-connectivity.outcome == 'failure' ||
          steps.validate-identity.outcome == 'failure' ||
          steps.validate-security.outcome == 'failure'
        run: |
          echo "‚ùå Critical platform validation failed"
          exit 1

